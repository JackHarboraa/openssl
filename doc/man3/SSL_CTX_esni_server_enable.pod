=pod

=head1 NAME

SSL_CTX_esni_server_enable, 
SSL_CTX_esni_server_key_status,
SSL_CTX_esni_server_flush_keys,
SSL_CTX_get_esni
- Encrypted Server Name Indication (ESNI) server-side support

=head1 SYNOPSIS

 #include <openssl/esni.h>
 int SSL_CTX_esni_server_enable(SSL_CTX *s, const char *esnikeyfile, const char *esnipubfile);
 int SSL_CTX_esni_server_flush_keys(SSL_CTX *s, int age);
 int SSL_CTX_esni_server_key_status(SSL_CTX *s, int *numkeys);
 int SSL_CTX_get_esni(SSL_CTX *s, SSL_ESNI **esni);

=head1 DESCRIPTION

These functions handle the server-side for encrypted SNI (ESNI). 

SSL_CTX_esni_server_enable() enables ESNI for an SSL context. The inputs are
the names of private and public key files, or the name of one file that contains
both keys. In all cases, private key file content must be in PEM format (a
base64 encoded PKCS8 PrivateKey). The content of
a standalone public key file must be the binary form of an ESNIKeys RR value, as would
be published in the DNS. Public keys can be formatted according to drafts -02, -03 or -04 of the
specification. 

If both keys are provided in one file, then both private key and public key
must be in PEM format. The PEM format string used is "ESNIKEY" and the value
must be the base64 encoding of the binary encoding of the ESNIKeys that would
be published in the DNS. In that case the esnipubfile must be NULL. 

If a server has multiple ESNI key pairs, SSL_CTX_esni_server_enable() may be
called multiple times, once for each key pair. Internally, a table of ESNI key
pairs will be associated with the SSL context, any of which can be used any
clients.  If the same file names are provided multiple times, then the keys
will not be reloaded unless file modification times have changed. (Note that
only filenames are used for this check, file content is not examined until a
key pair is being loaded.)

Depending on how keys are managed, a server may only need to make calls to
SSL_CTX_esni_server_enable() - the other functions below are not required if,
for example, server configuration is reloaded each time changes are needed to
the set of ESNI keys. If a single server process runs forwever without
reloading all configuration, then the functions below may be needed to manage
keys.

SSL_CTX_esni_server_flush_keys() deletes keys from internal storage that
were loaded more than ``age`` seconds ago. This can be used if keys are being
regularly generated (e.g. hourly), and retired (e.g. after 3 hours). 

SSL_CTX_esni_server_key_status() returns the number of keys that are
currently loaded in internal storage - the number is returned in the
``numkeys`` parameter.

SSL_CTX_get_esni() returns the array of internal SSL_ESNI data structures.
Note that this is likely to be removed when the draft specification is
finalised.

SSL_set_esni_callback_ctx() allows the server to check or log ESNI status
during the TLS handshake.

=head1 RETURN VALUES

All functions return 1 for success.

=head1 SEE ALSO

The (draft) ESNI specification: https://tools.ietf.org/html/draft-ietf-tls-esni

=head1 HISTORY

Initially developed by Stephen Farrell. Subsequently supported by OTF via
the DEfO project: https://defo.ie/

=head1 COPYRIGHT

Copyright 2002-2019 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
