=pod

=head1 NAME

SSL_esni_enable, SSL_ESNI_new_from_buffer,
SSL_esni_checknames, SSL_get_esni_status, 
SSL_ESNI_print, SSL_ESNI_free,
SSL_esni_query, SSL_ESNI_reduce,
SSL_set_esni_print_callback, SSL_CTX_set_esni_print_callback,
SSL_SESSION_set1_enchostname, SSL_SESSION_set1_public_name_override,
SSL_SESSION_set1_public_name, SSL_SESSION_get0_enchostname
- Encrypted Server Name Indication (ESNI) support - client and common functions 

=head1 SYNOPSIS

 #include <openssl/esni.h>
 int SSL_esni_enable(SSL *s, const char *hidden, const char *cover, SSL_ESNI *esni, int nesnis, int require_hidden_match);
 SSL_ESNI* SSL_ESNI_new_from_buffer(const short ekfmt, const size_t eklen, const char *esnikeys, int *num_esnis);
 int SSL_esni_checknames(const char *encservername, const char *public_name_override);
 int SSL_get_esni_status(SSL *s, char **hidden, char **cover);
 int SSL_ESNI_print(BIO* out, SSL_ESNI *esni, int selector);
 int SSL_esni_query(SSL_ESNI *in, SSL_ESNI_ext **out, int *nindices);
 int SSL_ESNI_reduce(SSL_ESNI *in, int index, SSL_ESNI **out);
 void SSL_ESNI_free(SSL_ESNI *esnikeys);
 void SSL_set_esni_print_callback(SSL *s, SSL_esni_client_cb_func f);
 void SSL_CTX_set_esni_print_callback(SSL_CTX *s, SSL_esni_client_cb_func f);
 int SSL_SESSION_set1_enchostname(SSL_SESSION *s, const char *hostname);
 int SSL_SESSION_set1_public_name_override(SSL_SESSION *s, const char *servername);
 int SSL_SESSION_set1_public_name(SSL_SESSION *s, const char *public_name);
 const char *SSL_SESSION_get0_enchostname(const SSL_SESSION *s);

=head1 DESCRIPTION

These functions handle the client side of encrypted SNI. Some are also useful
on servers.

SSL_esni_enable() requests that ESNI be used for a TLS session, with the
specified ESNI keys, ``hidden`` name and an optional ``cover`` name that will
be sent in the cleartext SNI. If no cleartext SNI is desired, or to use the
public_name from within the ESNIKeys structure used, provide a NULL as the
cover input. If a non-NULL cover name is supplied that will be used instead of
the public_name within the ESNIKeys structure.

SSL_esni_enable() also takes as input an array of SSL_ESNI structures that was
output from SSL_ESNI_new_from_buffer(), the number of elements in that array,
and a flag determining if the hidden name needs to match the TLS server
certificate used in the handshake or not. (That last may disappear.)

SSL_ESNI_new_from_buffer() takes as input a buffer containing a set of encoded
ESNIKeys, typically retrieved from DNS, checks and parses that buffer into an
array of SSL_ESNI structures that can subsequently be used in
SSL_esni_enable(). The size of that array is also returned in ``num_esnis``.

SSL_ESNI_new_from_buffer() also takes a format type as input.  That can take
the following values: 
- ESNI_RRFMT_GUESS: the implementation will try guess the format
- ESNI_RRFMT_BIN: the buffer contains catenated binary encoded ESNIKeys
- ESNI_RRFMT_ASCIIHEX: the buffer contains catenated ascii hex encoded ESNIKeys
- ESNI_RRFMT_B64TXT: the buffer a semi-colon separated list of base64 encoded ESNIKeys

In each case, the buffer can contain a set of catenated ESNIKeys values.  This
allows applications to handle the situation where they find multiple RR values
in the DNS.  (For the base64 encoded option, each needs to be separated by a
semi-colon.)

SSL_esni_checknames() currently only checks that the hidden and cover names are
not the same, which would be undesirable. (This function may disappear.) 

SSL_get_esni_status() will return the status of ESNI for an SSL session,
post-handshake. If ESNI was used the ``hidden`` and ``cover`` values will be
set appropriately. (If no cleartext SNI was used in the handshake, the
``cover`` returned will be a NULL.) The return value can be one of:
- SSL_ESNI_STATUS_GREASE - ESNI GREASE happened (if you care:-)
- SSL_ESNI_STATUS_SUCCESS - Success
- SSL_ESNI_STATUS_FAILED  - Some internal error
- SSL_ESNI_STATUS_BAD_CALL  - Required in/out arguments were badly set
- SSL_ESNI_STATUS_NOT_TRIED  - ESNI wasn't attempted 
- SSL_ESNI_STATUS_BAD_NAME  - ESNI succeeded but the server cert didn't match the hidden name
- SSL_ESNI_STATUS_TOOMANY  - ESNI succeeded but we can't figure out which one!

SSL_esni_query() provide a view of some of the (non-cryptographic) content
associated within a set of ESNI keys.  This allows a client to select one
of the set of ESNI keys via SSL_ESNI_reduce() by down-selecting to the
index provided. 
The structure returned by SSL_esni_query() is as shown below:

            typedef struct ssl_esni_ext_st {
                int index; ///< externally re-usable reference to this RR value
                char *public_name; ///< public_name from ESNIKeys
                char *prefixes;  ///< comma separated list of IP address prefixes, in CIDR form
                uint64_t not_before; ///< from ESNIKeys (not currently used)
                uint64_t not_after; ///< from ESNIKeys (not currently used)
            } SSL_ESNI_ext; 

Note that this is likely to change, for example, the not_before field has been
dropped from the ESNIKeys structure in draft-04 of the specification.

SSL_ESNI_free() frees up the internal structures linked to a set of ESNI keys.
The caller should subsequently free the SSL_ESNI array itself using
OPENSSL_free().

SSL_ESNI_print() provides a printable view of the internal SSL_ESNI
information.  (This is mainly for development and interoperability testing and
is not intended for logging.)

SSL_set_esni_print_callback() allows the application to set a callback that
will print ESNI information in a thread safe manner for debugging purposes. If
set, clients trigger this when the ESNI extension is added to the ClientHello.
On servers, this is triggered at the end of successful (or failed) decryption
of a received ESNI extension.  SSL_CTX_set_esni_print_callback() sets the
callback in the context, and that is copied into derived SSL sessions.  The
string returned (currently) includes many derived cryptographic variables
intended to help with interop testing.  At present, these are only used by
s_client and s_server, so may disappear in future.

SSL_SESSION_set1_enchostname(), SSL_SESSION_set1_public_name_override(),
SSL_SESSION_set1_public_name() and SSL_SESSION_get0_enchostname() allow for
setting and getting ESNI related values in an SSL_SESSION so that session
ticket handling continues to work as needed.

Aside from the functions above we also define new options that can be
set for SSL contexts:

SSL_OP_ESNI_GREASE - turn on support for "greasing" ESNI
SSL_OP_ESNI_HARDFAIL - set this to hard fail after attempted decryption
instead of greasing
SSL_OP_ESNI_TRIALDECRYPT - tell a server to attempt decryption using
all avilable ESNI keys before failing


=head1 RETURN VALUES

Unless otherwise stated all functions return 1 for success.

=head1 SEE ALSO

The specification: https://tools.ietf.org/html/draft-ietf-tls-esni

My fork has a bit of a design doc: https://github.com/sftcd/openssl/blob/master/esnistuff/design.md

=head1 HISTORY

Initially developed by Stephen Farrell. Subsequently supported by OTF via
the DEfO project: https://defo.ie/

=head1 COPYRIGHT

Copyright 2002-2019 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
